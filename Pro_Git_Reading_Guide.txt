Pro Git Reading Guide

### ch1

What is version control?

Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.

---

What is a DVCS?

In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don’t just check out the latest snapshot of the files: they fully mirror the repository. Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.

--

How does Git think about data? Explain the difference between snapshots and differences.

Git thinks of its data like a set of snapshots of a mini filesystem. Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. If files have not changed, Git doesn’t store the file again—just a link to the previous identical file it has already stored. 

--

What are the three main states that your files can reside in? Be able to explain each stage in a single sentence.

Committed: The data is safely stored in your local database. 

Modified: You have changed the file but have not committed it to your database yet. 

Staged: You have marked a modified file in its current version to go into your next commit snapshot.

--

What are the three main sections of a Git project? Again, be able to explain each section in a single sentence.

Directory: Where Git stores the metadata and object database for your project. This is the most important part of Git, and it is what is copied when you clone a repository from another computer.

Working Directory: A single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

Staging Area: A simple file, generally contained in your Git directory, that stores information about what will go into your next commit. It’s sometimes referred to as the index, but it’s becoming standard to refer to it as the staging area.

--

How do you call up a manual page for a command?

$ git help <verb>    OR
$ git <verb> --help  OR
$ man git-<verb>

## ch2

<Creating repos:>

How do you initialize a git repository in an existing project?

$ git init

*This creates a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton.

--

How do you use git clone to clone an existing repository?

$ git clone [url]

*Git receives a copy of nearly all data that the server has. Every version of every file for the history of the project is pulled down when you run git clone

--

For practice, clone the Rails repository on github

*DONE*

<Comparing, adding, and committing files:>

How do you use git status to check the status of the files in your git repo?

$ git status

*Untracked basically means that Git sees a file you didn’t have in the previous snapshot (commit); Git won’t start including it in your commit snapshots until you explicitly tell it to do so.

--

How do you check what staged and unstaged changes there are to files?

You can tell that it’s staged because it’s under the “Changes to be committed” heading. If you commit at this point, the version of the file at the time you ran git add is what will be in the historical snapshot. 

--

What is the difference between git diff and git diff --cached?

git diff
*To see what you’ve changed but not yet staged.

git diff --cached
*To see what you’ve staged that will go into your next commit.

--

<How do you stage files for tracking by git?>

How do you stage a single file?

$ git add FILE

--

How do you stage all the files with outstanding changes in the repo? (git add .); to remove deleted files from repository as well: (git add -A)

--

How do you stage files or chunks of files in patch mode? (git add -p)

--

How do you make a commit once you have staged files?

$ git commit

--

How do you tell git to ignore certain files or directories?

Setup a .gitignore file

--

How do you remove a file from your git repo?

$ git rm

--

Know how to use git mv instead of mv followed by git rm and git add.

$ mv README.txt README
$ git rm README.txt
$ git add README

SAME AS:

$ git mv file_from file_to

--

How do you amend your previous commit?

$ git commit --amend

ie.

$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
*After these three commands, you end up with a single commit, the second commit replaces the results of the first.

--

How do you unstage a staged file?

$ git reset HEAD <file>

--

How do you unstage all the staged files?

?

--

How do you "unmodify" a modified file using git checkout? (git checkout filename.rb)

$ git checkout -- FILE

--

<Viewing previous commits:>

How do you list the previous commits (git log)? To view 'all' logs, e.g. view branches on remote repos (git log --all)

$ git log  /  $ git log -all

Your readings don't mention the git show command, but you may want to look into this command so that you can get more detail on prior commits.

--

<Interacting with remotes:>

What is a remote repo?

Versions of your project that are hosted on the Internet or network somewhere. You can have several of them, each of which generally is either read-only or read/write for you. Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work.

For instance, github is a remote repository. But also, another folder on your computer that you have cloned from to another folder is a remote repository.

--

How do you list the remote repos?

$ git remote

--

How do you add a remote repo? (git remote add custom_repo_name https://github.com/appacademy/example.git)

$ git remote add [shortname] [url]

--

How do you fetch data from a remote?

$ git fetch REMOTE NAME

--

How do you push your changes to a remote?

$ git push [remote-name] [branch-name]
ie. $ git push origin master

<ch3>

What is a branch?

Branching means you diverge from the main line of development and continue to do work without messing with that main line.

--

How do you create a new branch? git branch new_branch_name, or switch to the new branch as you're creating it with git checkout -b new_branch_name



How do you switch to another branch?
How do you list all the branches?
How is the current branch indicated?
What is the name of the default (or first) branch?
How does Git know what branch you are currently on?
How do you merge another branch into your current branch? git merge other_branch_name
What is a fast-forward merge?
What is the workflow of a merge conflict? (merge command, resolve conflicts, then git commit)
What is a remote branch?
Why can't we check those out or commit to those directly?
How do we check out a branch that tracks a remote branch?
How do we then push code to the remote?